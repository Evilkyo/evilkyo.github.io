"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sense = void 0;
const app = require(".");
class Sense {
    constructor(itemDefault = new app.core.GlowData(0, 110, 225, 25, true, false), itemHighlight = new app.core.GlowData(137, 108, 64, 0, true, false), maximumDistance = 300) {
        this.itemDefault = itemDefault;
        this.itemHighlight = itemHighlight;
        this.maximumDistance = maximumDistance;
    }
    resetItems(_, items) {
        for (const item of items) {
            if (item.highlightFunctionBits.value.isSame(this.itemHighlight)) {
                item.highlightFunctionBits.value = this.itemDefault;
            }
        }
    }
    resetPlayers(localPlayer, players) {
        for (const player of players) {
            if (player.isValid && !player.isSameTeam(localPlayer)) {
                if (this.inRange(localPlayer, player.localOrigin)) {
                    /* This could be a Bloodhound scan! */
                }
                else if (player.glowEnable.value === 7 || player.glowEnable.value === 5) {
                    player.glowEnable.value = 5;
                    player.glowThroughWalls.value = 1;
                }
            }
        }
    }
    updateItems(localPlayer, items, itemSet) {
        for (const item of items) {
            if (itemSet.has(item.customScriptInt.value) && this.inRange(localPlayer, item.localOrigin)) {
                item.highlightFunctionBits.value = this.itemHighlight;
            }
            else if (item.highlightFunctionBits.value.isSame(this.itemHighlight)) {
                item.highlightFunctionBits.value = this.itemDefault;
            }
        }
    }
    updatePlayers(localPlayer, players, options) {
        for (const player of players) {
            if (player.isValid && !player.isSameTeam(localPlayer)) {
                const range = this.range(localPlayer, player.localOrigin);
                if (range < this.maximumDistance) {
                    if (options && options.longRangeMode && range > 50 && localPlayer.zooming.value == 1) {
                        player.glowEnable.value = 5;
                        player.glowThroughWalls.value = 1;
                    }
                    else {
                        player.glowEnable.value = 5;
                        player.glowThroughWalls.value = 1;
                    }
                }
                else if (player.glowEnable.value === 7 || player.glowEnable.value === 5) {
                    player.glowEnable.value = 5;
                    player.glowThroughWalls.value = 1;
                }
            }
        }
    }
    inRange(localPlayer, origin) {
        const dx = (localPlayer.localOrigin.value.x - origin.value.x) * 0.0254;
        const dy = (localPlayer.localOrigin.value.y - origin.value.y) * 0.0254;
        return Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2)) < this.maximumDistance;
    }
    range(localPlayer, origin) {
        const dx = (localPlayer.localOrigin.value.x - origin.value.x) * 0.0254;
        const dy = (localPlayer.localOrigin.value.y - origin.value.y) * 0.0254;
        return Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
    }
}
exports.Sense = Sense;
//# sourceMappingURL=data:application/json;base64,