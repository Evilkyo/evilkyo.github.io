"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Player = void 0;
const app = require("..");
class Player extends app.api.Adapter {
    constructor(address, localOrigin = new app.Vector(app.offsets.entity.localOrigin), glowEnable = new app.UInt8(app.offsets.player.glowEnable), glowThroughWalls = new app.UInt8(app.offsets.player.glowThroughWall), teamNum = new app.UInt8(app.offsets.player.iTeamNum, 1000), name = new app.UInt64(app.offsets.player.iName), lifeState = new app.UInt8(app.offsets.player.lifeState), lastVisibleTime = new app.Float32(app.offsets.entity.lastVisibleTime), vecPunchWeaponAngle = new app.Vector(app.offsets.player.vecPunchWeaponAngle), viewAngle = new app.Vector(app.offsets.player.viewAngle), bleedoutState = new app.UInt8(app.offsets.player.bleedoutState), zooming = new app.UInt8(app.offsets.player.zooming)) {
        super(new app.api.Entity(address, [localOrigin, glowEnable, glowThroughWalls, teamNum, name, lifeState, lastVisibleTime, vecPunchWeaponAngle, viewAngle, bleedoutState, zooming], { enableUpdate: true }));
        this.address = address;
        this.localOrigin = localOrigin;
        this.glowEnable = glowEnable;
        this.glowThroughWalls = glowThroughWalls;
        this.teamNum = teamNum;
        this.name = name;
        this.lifeState = lifeState;
        this.lastVisibleTime = lastVisibleTime;
        this.vecPunchWeaponAngle = vecPunchWeaponAngle;
        this.viewAngle = viewAngle;
        this.bleedoutState = bleedoutState;
        this.zooming = zooming;
    }
    get isValid() {
        return !this.lifeState.value
            && this.name.value
            && this.glowEnable.value !== 0
            && this.glowEnable.value !== 255;
    }
    createColor(otherPlayer) {
        return this.isSameTeam(otherPlayer)
            ? (this.bleedoutState.value ? '#FFFF00' : '#00FF00')
            : (this.bleedoutState.value ? '#FFA500' : '#FF0000');
    }
    isSameTeam(otherPlayer) {
        return this.teamNum.value === otherPlayer.teamNum.value;
    }
    toString() {
        return app.serialize(this);
    }
}
exports.Player = Player;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGxheWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL2VudGl0aWVzL1BsYXllci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwQkFBMEI7QUFFMUIsTUFBYSxNQUFPLFNBQVEsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUF1QjtJQUN6RCxZQUNXLE9BQWUsRUFDZixjQUFjLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFDNUQsYUFBYSxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQ3pELG1CQUFtQixJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLEVBQ3BFLFVBQVUsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFDMUQsT0FBTyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQy9DLFlBQVksSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUN2RCxrQkFBa0IsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxFQUNyRSxzQkFBc0IsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEVBQzVFLFlBQVksSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUN4RCxnQkFBZ0IsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUMvRCxVQUFVLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDNUQsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsbUJBQW1CLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFDLFlBQVksRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7UUFaaE0sWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUNmLGdCQUFXLEdBQVgsV0FBVyxDQUFpRDtRQUM1RCxlQUFVLEdBQVYsVUFBVSxDQUErQztRQUN6RCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQW9EO1FBQ3BFLFlBQU8sR0FBUCxPQUFPLENBQW1EO1FBQzFELFNBQUksR0FBSixJQUFJLENBQTJDO1FBQy9DLGNBQVMsR0FBVCxTQUFTLENBQThDO1FBQ3ZELG9CQUFlLEdBQWYsZUFBZSxDQUFzRDtRQUNyRSx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXlEO1FBQzVFLGNBQVMsR0FBVCxTQUFTLENBQStDO1FBQ3hELGtCQUFhLEdBQWIsYUFBYSxDQUFrRDtRQUMvRCxZQUFPLEdBQVAsT0FBTyxDQUE0QztJQUU5RCxDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSztlQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUs7ZUFDZixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssS0FBSyxDQUFDO2VBQzNCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxLQUFLLEdBQUcsQ0FBQztJQUNyQyxDQUFDO0lBRUQsV0FBVyxDQUFDLFdBQXVCO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUM7WUFDakMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQ3BELENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxVQUFVLENBQUMsV0FBdUI7UUFDaEMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssS0FBSyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUMxRCxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBQ0Y7QUFyQ0Qsd0JBcUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXBwIGZyb20gJy4uJztcblxuZXhwb3J0IGNsYXNzIFBsYXllciBleHRlbmRzIGFwcC5hcGkuQWRhcHRlcjxhcHAuYXBpLkVudGl0eT4ge1xuICBjb25zdHJ1Y3RvcihcbiAgICByZWFkb25seSBhZGRyZXNzOiBiaWdpbnQsXG4gICAgcmVhZG9ubHkgbG9jYWxPcmlnaW4gPSBuZXcgYXBwLlZlY3RvcihhcHAub2Zmc2V0cy5lbnRpdHkubG9jYWxPcmlnaW4pLFxuICAgIHJlYWRvbmx5IGdsb3dFbmFibGUgPSBuZXcgYXBwLlVJbnQ4KGFwcC5vZmZzZXRzLnBsYXllci5nbG93RW5hYmxlKSxcbiAgICByZWFkb25seSBnbG93VGhyb3VnaFdhbGxzID0gbmV3IGFwcC5VSW50OChhcHAub2Zmc2V0cy5wbGF5ZXIuZ2xvd1Rocm91Z2hXYWxsKSxcbiAgICByZWFkb25seSB0ZWFtTnVtID0gbmV3IGFwcC5VSW50OChhcHAub2Zmc2V0cy5wbGF5ZXIuaVRlYW1OdW0sIDEwMDApLFxuICAgIHJlYWRvbmx5IG5hbWUgPSBuZXcgYXBwLlVJbnQ2NChhcHAub2Zmc2V0cy5wbGF5ZXIuaU5hbWUpLFxuICAgIHJlYWRvbmx5IGxpZmVTdGF0ZSA9IG5ldyBhcHAuVUludDgoYXBwLm9mZnNldHMucGxheWVyLmxpZmVTdGF0ZSksXG4gICAgcmVhZG9ubHkgbGFzdFZpc2libGVUaW1lID0gbmV3IGFwcC5GbG9hdDMyKGFwcC5vZmZzZXRzLmVudGl0eS5sYXN0VmlzaWJsZVRpbWUpLFxuICAgIHJlYWRvbmx5IHZlY1B1bmNoV2VhcG9uQW5nbGUgPSBuZXcgYXBwLlZlY3RvcihhcHAub2Zmc2V0cy5wbGF5ZXIudmVjUHVuY2hXZWFwb25BbmdsZSksXG4gICAgcmVhZG9ubHkgdmlld0FuZ2xlID0gbmV3IGFwcC5WZWN0b3IoYXBwLm9mZnNldHMucGxheWVyLnZpZXdBbmdsZSksXG4gICAgcmVhZG9ubHkgYmxlZWRvdXRTdGF0ZSA9IG5ldyBhcHAuVUludDgoYXBwLm9mZnNldHMucGxheWVyLmJsZWVkb3V0U3RhdGUpLFxuICAgIHJlYWRvbmx5IHpvb21pbmcgPSBuZXcgYXBwLlVJbnQ4KGFwcC5vZmZzZXRzLnBsYXllci56b29taW5nKSkge1xuICAgIHN1cGVyKG5ldyBhcHAuYXBpLkVudGl0eShhZGRyZXNzLCBbbG9jYWxPcmlnaW4sIGdsb3dFbmFibGUsIGdsb3dUaHJvdWdoV2FsbHMsIHRlYW1OdW0sIG5hbWUsIGxpZmVTdGF0ZSwgbGFzdFZpc2libGVUaW1lLCB2ZWNQdW5jaFdlYXBvbkFuZ2xlLCB2aWV3QW5nbGUsIGJsZWVkb3V0U3RhdGUsIHpvb21pbmddLCB7ZW5hYmxlVXBkYXRlOiB0cnVlfSkpO1xuICB9XG4gIFxuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gIXRoaXMubGlmZVN0YXRlLnZhbHVlXG4gICAgICAmJiB0aGlzLm5hbWUudmFsdWVcbiAgICAgICYmIHRoaXMuZ2xvd0VuYWJsZS52YWx1ZSAhPT0gMFxuICAgICAgJiYgdGhpcy5nbG93RW5hYmxlLnZhbHVlICE9PSAyNTU7XG4gIH1cblxuICBjcmVhdGVDb2xvcihvdGhlclBsYXllcjogYXBwLlBsYXllcikge1xuICAgIHJldHVybiB0aGlzLmlzU2FtZVRlYW0ob3RoZXJQbGF5ZXIpXG4gICAgICA/ICh0aGlzLmJsZWVkb3V0U3RhdGUudmFsdWUgPyAnI0ZGRkYwMCcgOiAnIzAwRkYwMCcpXG4gICAgICA6ICh0aGlzLmJsZWVkb3V0U3RhdGUudmFsdWUgPyAnI0ZGQTUwMCcgOiAnI0ZGMDAwMCcpO1xuICB9XG5cbiAgaXNTYW1lVGVhbShvdGhlclBsYXllcjogYXBwLlBsYXllcikge1xuICAgIHJldHVybiB0aGlzLnRlYW1OdW0udmFsdWUgPT09IG90aGVyUGxheWVyLnRlYW1OdW0udmFsdWU7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gYXBwLnNlcmlhbGl6ZSh0aGlzKTtcbiAgfVxufVxuIl19